require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs');

const token = '7194536028:AAHP5LE4oygs5tBND3wdNb2Ym4yw1htATDc';

const bot = new TelegramBot(token, { polling: true });

let lastPriceBTC = null;
let lastPriceTON = null;
let userIds = new Set();

// –ó–∞–≥—Ä—É–∂–∞–µ–º chat.id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
try {
  const data = fs.readFileSync('users.json');
  userIds = new Set(JSON.parse(data));
} catch (e) {
  console.log('users.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—é –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã BTC —Å —Å–∞–π—Ç–∞ Coindesk
const getBTCPrice = async () => {
  const res = await axios.get('https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT');
  return parseFloat(res.data.price);
};

const getTONPrice = async () => {
  const res = await axios.get('https://api.binance.com/api/v3/ticker/price?symbol=TONUSDT');
  return parseFloat(res.data.price);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const checkPrice = async () => {
  try {
    const currentPriceBTC = await getBTCPrice();
    console.log(`–ê–∫—Ç—É–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ BTC: $${currentPriceBTC}`);

    const currentPriceTON = await getTONPrice();
    console.log(`–ê–∫—Ç—É–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ TON: $${currentPriceTON}`);

    if (lastPriceBTC !== null) {
      const diff = ((currentPriceBTC - lastPriceBTC) / lastPriceBTC) * 100;
      console.log(`–ó–º—ñ–Ω–∞: ${diff.toFixed(2)}%`);

      if (Math.abs(diff) >= 0) {
        for (let id of userIds) {
          bot.sendMessage(id, `üí∞ –¶—ñ–Ω–∞ BTC –∑–º—ñ–Ω–∏–ª–∞—Å—å –Ω–∞ ${diff.toFixed(2)}%: $${currentPriceBTC}`);
        }
        lastPriceBTC = currentPriceBTC;
      }
    } else {
      lastPriceBTC = currentPriceBTC;
    }

    if (lastPriceTON !== null) {
      const diff = ((currentPriceTON - lastPriceTON) / lastPriceTON) * 100;
      console.log(`–ó–º—ñ–Ω–∞: ${diff.toFixed(2)}%`);

      if (Math.abs(diff) >= 0) {
        for (let id of userIds) {
          bot.sendMessage(id, `üí∞ –¶—ñ–Ω–∞ TON –∑–º—ñ–Ω–∏–ª–∞—Å—å –Ω–∞ ${diff.toFixed(2)}%: $${currentPriceTON}`);
        }
        lastPriceTON = currentPriceTON;
      }
    } else {
      lastPriceTON = currentPriceTON;
    }

  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ü—ñ–Ω–∏:', err);
  }
};

// –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ü–µ–Ω—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(checkPrice, 300 * 1000);

// –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç chat.id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.onText(/\/start/, (msg) => {
  const id = msg.chat.id;
  if (!userIds.has(id)) {
    userIds.add(id);
    fs.writeFileSync('users.json', JSON.stringify([...userIds]));
    console.log(`–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${id}`);
  }
  bot.sendMessage(id, '‚úÖ –¢–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è BTC i TON!');
  
});

